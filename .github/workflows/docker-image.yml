name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checar o código do repositório
      uses: actions/checkout@v3

    # Instalar Docker e Docker Compose
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Instalar Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y curl
        curl -L https://github.com/docker/compose/releases/download/v2.17.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version  # Verifica se o docker-compose foi instalado corretamente

    # Instalar dependências do backend
    - name: Instalar dependências do backend
      run: |
        cd api  # Entrar no diretório 'api' se o package.json está lá
        npm install

    # Instalar dependências do frontend
    - name: Instalar dependências do frontend
      run: |
        cd blog-frontend  # Entrar no diretório 'blog-frontend' se necessário
        npm install

    # Construir as imagens Docker
    - name: Construir as imagens Docker
      run: |
        docker-compose -f docker-compose.yml build

    # Rodar os testes com Docker
    - name: Rodar os testes com Docker
      run: |
        docker-compose -f docker-compose.yml up -d
        docker-compose -f docker-compose.yml exec api npm test
        docker-compose -f docker-compose.yml down

    # Instalar ngrok corretamente
    - name: Instalar ngrok
      run: |
        # Baixar o arquivo ZIP do ngrok para Linux
        curl -s https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o /tmp/ngrok.zip
        sudo apt-get install -y unzip  # Instala o unzip caso não esteja presente
        unzip /tmp/ngrok.zip -d /tmp
        sudo mv /tmp/ngrok /usr/local/bin

    # Autenticar ngrok com o authtoken
    - name: Autenticar com o ngrok
      run: |
        ngrok authtoken ${{ secrets.NGROK_AUTH_TOKEN }}

    # Expor Swagger e Frontend via ngrok
    - name: Expor Swagger e Frontend via ngrok
      run: |
        # Subir os containers e aguardar o servidor iniciar
        docker-compose -f docker-compose.yml up -d
        echo "Aguardando servidores iniciarem..."
        until curl --silent --fail localhost:3000; do
          echo "Esperando o servidor de Swagger iniciar..."
          sleep 5
        done
        until curl --silent --fail localhost:3100; do
          echo "Esperando o servidor de frontend iniciar..."
          sleep 5
        done
        
        # Iniciar o ngrok para expor o Swagger na porta 3000 e o frontend na porta 3100
        echo "Iniciando ngrok para expor Swagger e Frontend..."
        ngrok http 3000 --log=stdout &
        ngrok http 3100 --log=stdout &
        
        # Aguardar alguns segundos para garantir que o ngrok tenha iniciado
        echo "Aguardando ngrok iniciar..."
        sleep 10  # Espera o ngrok inicializar
        
        # Captura os links públicos do Swagger e do Frontend gerados pelo ngrok
        SWAGGER_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        FRONTEND_URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[1].public_url')
        
        # Exibe as URLs públicas
        echo "Swagger está disponível em: $SWAGGER_URL/api-docs#/"
        echo "Frontend está disponível em: $FRONTEND_URL/api"

    # Realizar deploy
    - name: Realizar deploy
      run: |
        echo "Deploying..."
        # Adicione o código de deploy para o servidor, por exemplo, via SSH ou Docker
    env:
      MONGODB_URI: ${{ secrets.MONGODB_URI }}  # Usando a secret do GitHub para a URL do MongoDB
